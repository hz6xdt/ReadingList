@page "/tags"
@page "/tags/page/{page:int}"
@page "/tags/page/{page:int}/filter/{startsWith}"
<PageTitle>Tags | Reading List</PageTitle>

@inject ILoggingService Logging
@inject NavigationManager Navigation

<h5 class="bg-primary text-white text-center p-2">Tags</h5>

<div class="filter">
    <InputText @bind-Value="StartsWith" type="search" @onkeyup="HandleKeyUp" />
    <NavLink class="btn-primary" href="@GetFilterUrl()"><i class="fa fa-search"></i></NavLink>
</div>

<table class="table table-sm table-striped table-bordered">
    <thead><tr><th>ID</th><th>Data</th><th>Books</th><th></th></tr></thead>
    <tbody>
        @if (Tags.Count() == 0)
        {
            <tr><th colspan="5" class="p-4 text-center">@NoTagsMsg</th></tr>
        }
        else
        {
            @foreach (TagDTO t in Tags)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Data</td>
                    <td>@t.Books</td>
                    <td class="text-center">
                        <AuthorizeView Roles="Admin">
                            <NavLink class="btn btn-sm btn-warning" href="@GetEditUrl(t.Id)">Edit</NavLink>
                            <NavLink class="btn btn-sm btn-danger" href="@GetDeleteUrl(t.Id)">Delete</NavLink>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<PageNavBar TotalItems="@TotalTags" CurrentPageNumber="@Page" ItemsPerPage="@PageSize" NavUrl="/tags/page/" />

<AuthorizeView Roles="Admin">
    <NavLink class="btn btn-primary" href="tags/create">Create</NavLink>
</AuthorizeView>


@code
{
    [Parameter] public int Page { get; set; } = 1;
    [Parameter] public string StartsWith { get; set; } = string.Empty;

    public int PageSize { get; set; } = 10;
    public int TotalTags { get; set; }

    [Inject]
    public HttpClient? Http { get; set; }

    public TagDTO[] Tags { get; set; } = Array.Empty<TagDTO>();

    private string NoTagsMsg { get; set; } = "Loading Data...";

    protected async override Task OnParametersSetAsync()
    {
        Logging.Log($"\r\n\r\n\r\nTagsList OnParametersSetAsync - Page: {Page}.");
        if (Page < 1)
        {
            Page = 1;
        }
        await UpdateData();
    }

    private async Task UpdateData()
    {
        if (Http != null)
        {
            Pagination? pagination = await Http.GetFromJsonAsync<Pagination>("/api/r1/pagination/tags");

            TotalTags = pagination?.TotalItems ?? 0;
            if (TotalTags == 0)
            {
                NoTagsMsg = "No tags as of yet.";
            }
            else
            {
                //Logging.Log($"Page: {Page}.");

                PageSize = pagination?.PageSize ?? 10;
                //Logging.Log($"PageSize: {PageSize}.");

                if (string.IsNullOrWhiteSpace(StartsWith))
                {
                    Tags = await Http.GetFromJsonAsync<TagDTO[]>($"/api/r1/tags/page/{Page}") ?? Array.Empty<TagDTO>();
                }
                else
                {
                    Tags = await Http.GetFromJsonAsync<TagDTO[]>($"/api/r1/tags/listfilter/{Uri.EscapeDataString(StartsWith)}") ?? Array.Empty<TagDTO>();

                }
            }
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (string.IsNullOrWhiteSpace(StartsWith))
            {
                Navigation.NavigateTo($"/tags/page/{Page}");
            }
            else
            {
                Navigation.NavigateTo(GetFilterUrl());
            }
        }
        else if (e.Key == "Escape")
        {
            StartsWith = string.Empty;
        }
    }
    string GetEditUrl(long id) => $"tags/edit/{id}";
    string GetDeleteUrl(long id) => $"tags/delete/{id}";
    string GetFilterUrl()
    {
        if (string.IsNullOrWhiteSpace(StartsWith))
        {
            return $"tags/page/{Page}";
        }
        else
        {
            return $"tags/page/{Page}/filter/{Uri.EscapeDataString(StartsWith)}";
        }
    }
}