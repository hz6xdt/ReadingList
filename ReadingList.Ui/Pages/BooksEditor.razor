@page "/books/edit/{id:long}"
@page "/books/delete/{id:long}"
@page "/books/create"
<PageTitle>Books @Mode | Reading List</PageTitle>

@attribute [Authorize(Roles = "Admin")]

@inject ILogger<BooksEditor> Logger

<link href="/lib/css/blazorValidation.css" rel="stylesheet" />

<h4 class="bg-@Theme text-center text-white p-2">Books @Mode</h4>

<EditForm Model="BookData" OnValidSubmit="HandleValidSubmit">

    <DataAnnotationsValidator />

    @if (Mode == "Delete")
    {
        <div class="form-group">
            <label>ID</label>
            <InputNumber TValue="long" class="form-control" @bind-Value="BookData.Id" readonly />
        </div>
        <div class="form-group">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="BookData.Name" readonly />
        </div>
        <div class="form-group">
            <label>ISBN</label>
            <InputText class="form-control" @bind-Value="BookData.ISBN" readonly />
        </div>
        <div class="form-group">
            <label>Author</label>
            <InputText class="form-control" @bind-Value="BookData.Author" readonly />
        </div>
        <div class="form-group">
            <label>Tags</label>
            <InputText class="form-control" @bind-Value="BookData.Tags" readonly />
        </div>
        <div class="form-group">
            <label>Sequence</label>
            <InputNumber TValue="int?" class="form-control" @bind-Value="BookData.Sequence" readonly />
        </div>
        <div class="form-group">
            <label>Rating</label>
            <div class="rating"><Rating IsReadOnly="true" @bind-StarCount="@BookData.Rating" /></div>
        </div>
        <div class="form-group">
            <label>Read Dates</label>
            <InputText class="form-control" @bind-Value="BookData.ReadDates" DisplayName="Read Dates" readonly />
        </div>
        <div class="form-group">
            <label>Image URL</label>
            <InputText class="form-control" @bind-Value="BookData.ImageUrl" DisplayName="Cover Image URL" readonly />
        </div>
        <div class="form-group">
            <label>Recommend</label>
            <InputCheckbox class="form-control" @bind-Value="BookData.Recommend" disabled />
        </div>
        <div class="form-group">
            <label>Source</label>
            <InputText class="form-control" @bind-Value="BookData.Source" readonly />
        </div>
        <div class="text-center">
            <NavLink class="btn btn-secondary mt-2 mb-5" href="books">Back</NavLink>
            <ValidButton type="submit" BtnTheme="@Theme">Delete</ValidButton>
        </div>
    }
    else
    {
        @if (Mode == "Edit")
        {
            <div class="form-group">
                <label>ID</label>
                <InputNumber class="form-control" @bind-Value="BookData.Id" readonly />
            </div>
        }
        <div class="form-group">
            <label>Title</label>
            <ValidationMessage For="@(() => BookData.Name)" />
            <InputText class="form-control" @bind-Value="BookData.Name" />
        </div>
        <div class="form-group">
            <label>ISBN</label>
            <ValidationMessage For="@(() => BookData.ISBN)" />
            <InputText class="form-control" @bind-Value="BookData.ISBN" />
        </div>
        <div class="form-group">
            <label>Author</label>
            <ValidationMessage For="@(() => BookData.Author)" />
            <InputText class="form-control" @bind-Value="BookData.Author" />
        </div>
        <div class="form-group">
            <label>Tags</label>
            <ValidationMessage For="@(() => BookData.Tags)" />
            <InputText class="form-control" @bind-Value="BookData.Tags" />
        </div>
        <div class="form-group">
            <label>Sequence</label>
            <ValidationMessage For="@(() => BookData.Sequence)" />
            <InputNumber class="form-control" @bind-Value="BookData.Sequence" />
        </div>
        <div class="form-group">
            <label>Rating</label>
            <div class="rating"><Rating @bind-StarCount="BookData.Rating" /></div>
        </div>
        <div class="form-group">
            <label>Read Dates</label>
            <ValidationMessage For="@(() => BookData.ReadDates)" />
            <InputText class="form-control" @bind-Value="BookData.ReadDates" DisplayName="Read Dates" />
        </div>
        <div class="form-group">
            <label>Image URL</label>
            <ValidationMessage For="@(() => BookData.ImageUrl)" />
            <InputText class="form-control" @bind-Value="BookData.ImageUrl" DisplayName="Cover Image URL" />
        </div>
        <div class="form-group">
            <label>Recommend</label>
            <ValidationMessage For="@(() => BookData.Recommend)" />
            <InputCheckbox class="form-control" @bind-Value="BookData.Recommend" />
        </div>
        <div class="form-group">
            <label>Source</label>
            <ValidationMessage For="@(() => BookData.Source)" />
            <InputText class="form-control" @bind-Value="BookData.Source" />
        </div>
        <div class="text-center">
            <NavLink class="btn btn-secondary mt-2 mb-5" href="books">Back</NavLink>
            <ValidButton type="submit" BtnTheme="@Theme">Save</ValidButton>
        </div>
    }
</EditForm>


@code {

    [Inject]
    public HttpClient? Http { get; set; }

    [Inject]
    public NavigationManager? NavManager { get; set; }

    [Parameter]
    public long Id { get; set; }

    public BookDTO BookData { get; set; } = new BookDTO() { Name = string.Empty };


    protected async override Task OnParametersSetAsync()
    {
        if (Http != null)
        {
            if (Mode == "Edit" || Mode == "Delete")
            {
                BookData = await Http.GetFromJsonAsync<BookDTO>($"/api/r1/books/{Id}") ?? new() { Name = string.Empty };
            }
        }
    }

    public string Mode => Id == 0 ? "Create" : (NavManager?.Uri.Contains("delete", StringComparison.OrdinalIgnoreCase)) ?? false ? "Delete" : "Edit";
    public string Theme => Mode == "Create" ? "primary" : Mode == "Delete" ? "danger" : "warning";

    public async Task HandleValidSubmit()
    {
        if (Http != null)
        {
            if (Mode == "Create")
            {
                await Http.PostAsJsonAsync("/api/r1/books",
                    new BookBindingTarget
                        {
                            Name = BookData.Name,
                            Sequence = BookData.Sequence,
                            Rating = BookData.Rating,
                            Recommend = BookData.Recommend,
                            ISBN = BookData.ISBN,
                            ReadDates = BookData.ReadDates,
                            ImageUrl = BookData.ImageUrl ?? Book.DefaultCoverImageUrl,
                            Author = BookData.Author,
                            Tags = BookData.Tags,
                            Source = BookData.Source
                        });
                NavManager?.NavigateTo("books");
            }
            else
            {
                if (Mode == "Edit")
                {
                    await Http.PutAsJsonAsync("/api/r1/books",
                        new BookUpdateBindingTarget
                            {
                                Id = BookData.Id,
                                Name = BookData.Name,
                                Sequence = BookData.Sequence,
                                Rating = BookData.Rating,
                                Recommend = BookData.Recommend,
                                ISBN = BookData.ISBN,
                                ReadDates = BookData.ReadDates,
                                ImageUrl = BookData.ImageUrl ?? Book.DefaultCoverImageUrl,
                                Author = BookData.Author,
                                Tags = BookData.Tags,
                                Source = BookData.Source
                            });
                    NavManager?.NavigateTo("books");
                }
                else
                {
                    HttpResponseMessage resp = await Http.DeleteAsync($"/api/r1/books/{BookData.Id}");
                    if (resp.IsSuccessStatusCode)
                    {
                        NavManager?.NavigateTo("books");
                    }
                }
            }
        }
    }
}
