@page "/tags/edit/{id:long}"
@page "/tags/create"
<PageTitle>Tags @Mode | Reading List</PageTitle>

@attribute [Authorize(Roles = "Admin")]

<link href="/lib/css/blazorValidation.css" rel="stylesheet" />

<h4 class="bg-@Theme text-center text-white p-2">Tags @Mode</h4>

<EditForm Model="TagData" OnValidSubmit="HandleValidSubmit">

    <DataAnnotationsValidator />

    @if (Mode == "Edit")
    {
        <div class="form-group">
            <label>ID</label>
            <InputNumber TValue="long" class="form-control" @bind-Value="TagData.Id" readonly />
        </div>
    }
    <div class="form-group">
        <label>Data</label>
        <ValidationMessage For="@(() => TagData.Data)" />
        <InputText class="form-control" @bind-Value="TagData.Data" />
    </div>
    <div class="text-center" p-2>
        <NavLink class="btn btn-secondary mt-2 mb-5" href="tags">Back</NavLink>
        <ValidButton type="submit" BtnTheme="@Theme">Save</ValidButton>
    </div>
</EditForm>


@code {

    [Inject]
    public HttpClient? Http { get; set; }

    [Inject]
    public NavigationManager? NavManager { get; set; }

    [Parameter]
    public long Id { get; set; }

    public TagDTO TagData { get; set; } = new TagDTO() { Data = string.Empty };

    protected async override Task OnParametersSetAsync()
    {
        if (Http != null)
        {
            if (Mode == "Edit")
            {
                TagData = await Http.GetFromJsonAsync<TagDTO>($"/api/r1/tags/{Id}") ?? new() { Data = string.Empty };
            }
        }
    }

    public string Theme => Id == 0 ? "primary" : "warning";
    public string Mode => Id == 0 ? "Create" : "Edit";

    public async Task HandleValidSubmit()
    {
        if (Http != null)
        {
            if (Mode == "Create")
            {
                await Http.PostAsJsonAsync("/api/r1/tags",
                    new TagBindingTarget
                        {
                            Data = TagData.Data ?? string.Empty
                        });
            }
            else
            {
                await Http.PutAsJsonAsync("/api/r1/tags",
                    new TagUpdateBindingTarget
                        {
                            Id = TagData.Id,
                            Data = TagData.Data ?? string.Empty
                        });
            }

            NavManager?.NavigateTo("tags");
        }
    }
}
