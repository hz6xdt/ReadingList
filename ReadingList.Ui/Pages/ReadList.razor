@page "/"
<PageTitle>Reading List</PageTitle>

@inject ILoggingService Logging
@using ReadingList.Ui.Layout

<div class="row">

    <AuthorizeView Roles="Admin" Context="authContext">
        <div class="col-md-5">

            <h5 class="bg-primary text-white p-2">Add New Entry:</h5>

            <EditForm Model="BookData" OnValidSubmit="HandleValidSubmit">

                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Read Date</label>
                    <ValidationMessage For="@(() => BookData.ReadDate)" />
                    <InputDate TValue="DateOnly" class="form-control" @bind-Value="BookData.ReadDate" DisplayName="Read Date" />
                </div>
                <DvcInputText Label="Title" Id="name" @bind-Value="BookData.Name" OnSelectItem="SelectBook"
                              TItem="BookListItem" Context="bookListItem" ApiUrl="api/r1/books/filter/" ValidationFor="@(() => BookData.Name)">
                </DvcInputText>
                <DvcInputText Label="ISBN" Id="isbn" @bind-Value="BookData.ISBN" ValidationFor="@(() => BookData.ISBN)" TItem="BookListItem" />
                <DvcInputText Label="Author" Id="author" @bind-Value="BookData.Author" OnSelectItem="SelectAuthor"
                              TItem="AuthorListItem" Context="authorListItem" ApiUrl="api/r1/authors/filter/" ValidationFor="@(() => BookData.Author)">
                </DvcInputText>
                <DvcInputText Label="Tags" Id="tags" @bind-Value="BookData.Tags" OnSelectItem="SelectTag"
                              TItem="TagListItem" Context="tagListItem" ApiUrl="api/r1/tags/filter/" ValidationFor="@(() => BookData.Tags)">
                </DvcInputText>
                <div class="form-group">
                    <label>Sequence</label>
                    <ValidationMessage For="@(() => BookData.Sequence)" />
                    <InputNumber TValue="int?" class="form-control" @bind-Value="BookData.Sequence" min="1" max="200" />
                </div>
                <div class="form-group">
                    <label>Rating</label>
                    <div class="rating text-center"><Rating @bind-StarCount="BookData.Rating" /></div>
                </div>
                <DvcInputText Label="Image URL" Id="imageUrl" @bind-Value="BookData.ImageUrl" DisplayName="Cover Image URL"
                              TItem="BookListItem" ValidationFor="@(() => BookData.ImageUrl)" />
                <div class="form-group">
                    <label>Recommend</label>
                    <ValidationMessage For="@(() => BookData.Recommend)" />
                    <InputCheckbox class="form-control read-input" @bind-Value="BookData.Recommend" />
                </div>
                <DvcInputText Label="Source" Id="source" @bind-Value="BookData.Source" OnSelectItem="SelectSource"
                              TItem="SourceListItem" Context="sourceListItem" ApiUrl="api/r1/sources/filter/" ValidationFor="@(() => BookData.Source)">
                </DvcInputText>
                <div class="text-center">
                    <button class="btn btn-secondary mt-2 mb-5" @onclick="ResetClick">Reset</button>
                    <ValidButton type="submit" BtnTheme="primary">Save</ValidButton>
                </div>
            </EditForm>

        </div>
    </AuthorizeView>


    <div class="col-md-offset-1 col-md-7">

        <h5 class="bg-primary text-white p-2">Recent List:</h5>

        @if (RecentBooks.Count() == 0)
        {
            <div>Loading Data...</div>
        }
        else
        {
            <ul>
                @foreach (BookDTO b in RecentBooks)
                {
                    <li>
                        <div style="clear: left;"><span class="title">@b.Name</span></div>
                        <div class="row">
                            <div class="col-md-4">
                                <img class="coverImage" src="@b.ImageUrl" alt="cover art" />
                            </div>
                            <div class="col-md-8">
                                <div style="margin-top: 1em;">Read Dates: &nbsp;&nbsp;@b.ReadDates</div>
                                @if (@b.Author != null)
                                {
                                    <div>Author: &nbsp;&nbsp;@b.Author</div>
                                }
                                @if (@b.Tags != null)
                                {
                                    <div>Tags: &nbsp;&nbsp;@b.Tags</div>
                                }
                                @if (@b.ISBN != null)
                                {
                                    <div>ISBN: &nbsp;&nbsp;@b.ISBN</div>
                                }
                                @if (@b.Sequence != null)
                                {
                                    <div>Sequence: &nbsp;&nbsp;@b.Sequence</div>
                                }
                                @if (@b.Rating > 0)
                                {
                                    <div class="rating">Rating: &nbsp;&nbsp;<Rating IsReadOnly="true" IsCompact="true" StarCount=@b.Rating /></div>
                                }
                                @if (@b.Source != null)
                                {
                                    <div>Source: &nbsp;&nbsp;@b.Source</div>
                                }
                                @if (b.Recommend)
                                {
                                    <div>Recommend: &nbsp;&nbsp;@b.Recommend</div>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

</div>


@code
{
    [Inject]
    public HttpClient? Http { get; set; }

    [Inject]
    public NavigationManager? NavManager { get; set; }


    public ReadBindingTarget BookData { get; set; } = new ReadBindingTarget() { Name = string.Empty };
    public BookDTO[] RecentBooks { get; set; } = Array.Empty<BookDTO>();


    private void ResetClick()
    {
        BookData = new ReadBindingTarget() { Name = string.Empty };
    }


    protected async override Task OnInitializedAsync()
    {
        if (Http != null)
        {
            BookData = new ReadBindingTarget() { Name = string.Empty };
            RecentBooks = await Http.GetFromJsonAsync<BookDTO[]>("/api/r1/readList") ?? Array.Empty<BookDTO>();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (Http != null)
        {
            Logging.Log($"Adding {BookData.Name} to read list.");
            await Http.PostAsJsonAsync("/api/r1/readList",
                new ReadBindingTarget
                    {
                        Name = BookData.Name,
                        Sequence = BookData.Sequence,
                        Rating = BookData.Rating,
                        Recommend = BookData.Recommend,
                        ISBN = BookData.ISBN,
                        ReadDate = BookData.ReadDate,
                        ImageUrl = BookData.ImageUrl ?? Book.DefaultCoverImageUrl,
                        Author = BookData.Author,
                        Tags = BookData.Tags,
                        Source = BookData.Source
                    });


            Logging.Log("Getting current read list.");
            RecentBooks = await Http.GetFromJsonAsync<BookDTO[]>("/api/r1/readList") ?? Array.Empty<BookDTO>();
        }
    }

    private void SelectBook(BookListItem selectedBook)
    {
        BookData.Name = selectedBook.Text;
        BookData.Sequence = selectedBook.Sequence;
        BookData.Rating = selectedBook.Rating;
        BookData.Recommend = selectedBook.Recommend;
        BookData.ISBN = selectedBook.ISBN;
        BookData.ImageUrl = selectedBook.ImageUrl;
        BookData.Author = selectedBook.Author;
        BookData.Tags = selectedBook.Tags;
        BookData.Source = selectedBook.Source;
    }

    private void SelectAuthor(AuthorListItem selectedAuthor)
    {
        BookData.Author = selectedAuthor.Text;
    }

    private void SelectSource(SourceListItem selectedSource)
    {
        BookData.Source = selectedSource.Text;
    }

    private void SelectTag(TagListItem selectedTag)
    {
        BookData.Tags = selectedTag.Text;
    }
}
