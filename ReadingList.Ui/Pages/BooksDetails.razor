@page "/books/page/{page:int}/details/{id:long}"
<PageTitle>Book Details | Reading List</PageTitle>

@inject ILogger<BooksDetails> Logger

<h4 class="bg-info text-center p-2">Book Details</h4>

<div class="form-group">
    <label>ID</label>
    <input type="number" class="form-control" value="@BookData.Id" disabled />
</div>
<div class="form-group">
    <label>Name</label>
    <input class="form-control" value="@BookData.Name" disabled />
</div>
<div class="form-group">
    <label>ISBN</label>
    <input class="form-control" value="@BookData.ISBN" disabled />
</div>
<div class="form-group">
    <label>Author</label>
    <input class="form-control" value="@BookData.Author" disabled />
</div>
<div class="form-group">
    <label>Cover Image</label><br />
    <img class="rounded img-fluid img-max" src="@BookData.ImageUrl" />
</div>
<div class="form-group">
    <label>Image URL</label>
    <input class="form-control" value="@BookData.ImageUrl" disabled />
</div>
<div class="form-group">
    <label>Tags</label>
    <input class="form-control" value="@BookData.Tags" disabled />
</div>
<div class="form-group">
    <label>Sequence</label>
    <input type="number" class="form-control" value="@BookData.Sequence" disabled />
</div>
<div class="form-group">
    <label>Rating</label>
    <div class="rating"><Rating IsReadOnly="true" StarCount="@BookData.Rating" /></div>
</div>
<div class="form-group">
    <label>Dates Read</label>
    <input class="form-control" value="@BookData.ReadDates" disabled />
</div>
<div class="form-group">
    <label>Recommend</label>
    @if (BookData.Recommend)
    {
        <input type="checkbox" class="form-control" checked disabled />
    }
    else
    {
        <input type="checkbox" class="form-control" disabled />
    }
</div>
<div class="form-group">
    <label>Source</label>
    <input class="form-control" value="@BookData.Source" disabled />
</div>
<div class="text-center">
    <NavLink class="btn btn-secondary m-2" href="@GetPageUrl(Page)">Back</NavLink>
    <AuthorizeView Roles="Admin">
        <NavLink class="btn btn-info m-2" href="@GetEditUrl(Id)">Edit</NavLink>
    </AuthorizeView>
</div>

@code {

    [Inject]
    public NavigationManager? NavManager { get; set; }

    [Inject]
    public HttpClient? Http { get; set; }

    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public int Page { get; set; } = 1;

    public BookDTO BookData { get; set; } = new BookDTO() { Name = string.Empty };

    protected async override Task OnParametersSetAsync()
    {
        if (Http != null)
        {
            BookData = await Http.GetFromJsonAsync<BookDTO>($"/api/r1/books/{Id}") ?? new() { Name = string.Empty };

            Logger.LogInformation(@"\r\n\r\n\r\nReceived BookData -- Id: {Id}, Name: {Name}, ISBN: {ISBN}, Tags: {Tags}, ReadDates: {ReadDates}, Sequence: {Sequence}, Author: {Author},
                Rating: {Rating}, ImageUrl: {ImageUrl}, Recommend: {Recommend}.",
                BookData?.Id, BookData?.Name, BookData?.ISBN, BookData?.Tags, BookData?.ReadDates, BookData?.Sequence, BookData?.Rating, BookData?.Author, BookData?.ImageUrl, BookData?.Recommend);
        }
    }

    string GetEditUrl(long id) => $"books/page/{Page}/edit/{id}";
    string GetPageUrl(int page) => $"books/page/{Page}";
}
