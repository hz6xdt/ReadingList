@inject ILoggingService Logging
@inject NavigationManager Navigation

@if (TotalPages > 1)
{
    <nav aria-label="Page navigation" class="current-page">
        <ul class="pagination pagination-primary">
            <li class="page-item active">
                <InputText class="page-link active text-center" size="1" @bind-Value="CurrentPageNumberText" />
            </li>
        </ul>
    </nav>

    <nav aria-label="Page navigation">
        <ul class="pagination pagination-primary">
            @if (CurrentPageNumber > 1)
            {
                <li class="page-item">
                    <NavLink class="page-link" href="@GetUrl(1)">
                        <span aria-hidden="true"><i class="fa-solid fa-backward-step"></i></span>
                    </NavLink>
                </li>
            }

            @if (StartPage != MaxPage)
            {
                @for (int i = StartPage; i <= MaxPage; i++)
                {
                    string pageNumber = i.ToString();   //need local variable inside for loop in Blazor components.
                    string subClass = CurrentPageNumber == i ? "active" : string.Empty;
                    <li class="page-item @subClass"><NavLink class="page-link" href="@GetUrl(i)">@pageNumber</NavLink></li>
                }
            }

            @if (CurrentPageNumber < TotalPages)
            {
                <li class="page-item">
                    <NavLink class="page-link" href="@GetUrl(TotalPages)">
                        <span aria-hidden="true"><i class="fa-solid fa-forward-step"></i></span>
                    </NavLink>
                </li>
            }
        </ul>
    </nav>
}


@code
{
    [Parameter] public string NavUrl { get; set; } = string.Empty;
    [Parameter] public int CurrentPageNumber { get; set; } = 1;
    [Parameter] public int ItemsPerPage { get; set; } = 10;
    [Parameter] public int TotalItems { get; set; }


    public string CurrentPageNumberText
    {
        get
        {
            return CurrentPageNumber.ToString();
        }
        set
        {
            if (int.TryParse(value, out int intValue))
            {
                if (intValue < 1)
                {
                    intValue = 1;
                }
                if (intValue > TotalPages)
                {
                    intValue = TotalPages;
                }
                CurrentPageNumber = intValue;
                Navigation.NavigateTo(GetUrl(CurrentPageNumber));
            }
        }
    }

    private int myVar;

    public int MyProperty
    {
        get { return myVar; }
        set { myVar = value; }
    }


    public int TotalPages
    {
        get
        {
            if (TotalItems == 0 || ItemsPerPage == 0)
            {
                return 1;
            }

            int result = (int)Math.Ceiling((decimal)TotalItems / ItemsPerPage);
            //Logging.Log($"TotalPages: {result}.");

            return result;
        }
    }

    public int StartPage
    {
        get
        {
            //Logging.Log($"StartPage -- CurrentPageNumber: {CurrentPageNumber}.");
            int startPage = CurrentPageNumber - 2;
            if (startPage < 1)
            {
                startPage = 1;
            }

            return startPage;
        }
    }

    public int MaxPage
    {
        get
        {
            //Logging.Log($"MaxPage -- StartPage: {StartPage}.");
            int maxPage = StartPage + 4;

            if (maxPage > TotalPages)
            {
                maxPage = TotalPages;
            }

            return maxPage;
        }
    }

    public string GetUrl(int page) => $"{NavUrl}{page}";
}
